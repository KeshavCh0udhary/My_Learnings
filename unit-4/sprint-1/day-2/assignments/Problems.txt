Q1.) Explain Type casting and its types with examples?
Ans: The process of converting data from one data type to another data type is called known as Type
Casting.

There are two types of primitive data types type castings.
1. Implicit Type Casting
2. Explicit Type Casting

Implicit Type Casting :- The process of converting data from lower data type to higher data type is called as
Implicit Type Casting.

Examples :- 
byte b=20;
int i = b;
System.out.println(b+" "+i);

Status: Compilation Error, Possible loss of precision.
Here{Type Checking is the responsibility of compiler and Type Casting is the responsibility
of JVM.}

char c='A';
int i=c;
System.out.println(c+" "+i);
Status: No Compilation Error
OUTPUT: A 65


Explicit Type Casting :- The process of converting data from higher data type to lower data type is called as Explicit Type
Casting.
To perform explicit type casting we have to use the following pattern.
P a = (Q) b;
(Q) â†’ Cast operator
Where P and Q are two primitive data types, where Q must be either same as P or lower than P .


Examples :- 
int i = 10;
byte b = (byte)i;
System.out.println(i+" "+b);

byte b1=30;
byte b2=30;
byte b=(byte)(b1+b2);
System.out.println(b);


Q2) Create a class Main with a main method.
Ans : 
Github Link:- https://github.com/masai-course/Krishna_fw19_0681/tree/master/unit-4/sprint-1/day-2/assignments/com/typeCasting

Q3) Explain the difference between local and instance variables?
Ans : 

Local Variable :- These variables are declared within a method but do not get any default value.

They are usually created when we enter a method or constructor and are destroyed after exiting the block or when the call returns from the method.

Its scope is generally limited to a method and its scope starts from the line they are declared. Their scope usually remains there until the closing curly brace of the method comes.

The initialization of the local variable is mandatory.

Example -- 

int sum() {    
        int Num1 = 10; // Local variable          
        int Num2 = 5; // Local variable          
        int Sum = Num1+Num2; // Local variable          
        return Sum;          
}  


Instance Variable :- These variables are declared within a class but outside a method, constructor, or block and always get a default value.

These variables are usually created when we create an object and are destroyed when the object is destroyed.

We may use an access specifier, for instance, variable, and if no access specifier is specified, then the default access specifier is used.

Each and every object will have its own copy of instance variables.

Example -- 
class Taxes {  
   int Num; // Here Num is an Instance variable. 
} 