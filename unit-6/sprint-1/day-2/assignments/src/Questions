Q2. When should one use Maven?
ans--
Maven, a Yiddish word meaning accumulator of knowledge, began as an attempt to simplify the build processes in the Jakarta Turbine project. There were several projects, each with their own Ant build files, that were all slightly different. JARs were checked into CVS. We wanted a standard way to build the projects, a clear definition of what the project consisted of, an easy way to publish project information, and a way to share JARs across several projects.

The result is a tool that can now be used for building and managing any Java-based project. We hope that we have created something that will make the day-to-day work of Java developers easier and generally help with the comprehension of any Java-based project.

Maven's Objectives
Maven's primary goal is to allow a developer to comprehend the complete state of a development effort in the shortest period of time. In order to attain this goal, Maven deals with several areas of concern:

Making the build process easy
Providing a uniform build system
Providing quality project information
Encouraging better development practices
Making the build process easy
While using Maven doesn't eliminate the need to know about the underlying mechanisms, Maven does shield developers from many details.

Providing a uniform build system
Maven builds a project using its project object model (POM) and a set of plugins. Once you familiarize yourself with one Maven project, you know how all Maven projects build. This saves time when navigating many projects.

Providing quality project information
Maven provides useful project information that is in part taken from your POM and in part generated from your project's sources. For example, Maven can provide:

Change log created directly from source control
Cross referenced sources
Mailing lists managed by the project
Dependencies used by the project
Unit test reports including coverage
Third party code analysis products also provide Maven plugins that add their reports to the standard information given by Maven.

Providing guidelines for best practices development
Maven aims to gather current principles for best practices development and make it easy to guide a project in that direction.

For example, specification, execution, and reporting of unit tests are part of the normal build cycle using Maven. Current unit testing best practices were used as guidelines:

Keeping test source code in a separate, but parallel source tree
Using test case naming conventions to locate and execute tests
Having test cases setup their environment instead of customizing the build for test preparation
Maven also assists in project workflow such as release and issue management.

Maven also suggests some guidelines on how to layout your project's directory structure. Once you learn the layout, you can easily navigate other projects that use Maven.

While Maven takes an opinionated approach to project layout, some projects may not fit with this structure for historical reasons. While Maven is designed to be flexible to the needs of different projects, it cannot cater to every situation without compromising its objectives.
If your project has an unusual build structure that cannot be reorganized, you may have to forgo some features or the use of Maven altogether.


Q3. Explain the core concepts of Maven.
ans--

Maven is based on the concept of project object model (POM) file. POM is an XML file which contains project resources like source code, test code and dependencies (external JARs) etc. The POM file should be in the project’s root directory.


Maven overview diagram:



Maven reads the pom.xml file.
Downloads dependencies into local repository.
Execute life cycles, build phases and goals.
Execute plugins.
Maven Core Concepts:

POM Files
Build Life Cycles, Phases and Goals
Dependencies and Repositories
Build Plugins
Build Profiles

Q4. Explain about the basic properties of pom.xml file?
ans--
POM is an acronym for Project Object Model. The pom.xml file contains information of project and configuration information for the maven to build the project such as dependencies, build directory, source directory, test source directory, plugin, goals etc.

Maven reads the pom.xml file, then executes the goal.

Before maven 2, it was named as project.xml file. But, since maven 2 (also in maven 3), it is renamed as pom.xml.


Q5. What are the different phases of the default life cycle?
ans--
Maven Life Cycle
Maven defines 3 build lifecycles

Default Lifecycle
Clean Lifecycle
Site Lifecycle
Maven allows executing more than one lifecycle phase at a time. Each lifecycle is independent of each other. Life cycles have to be executed in sequential order as shown above. The complete maven lifecycle is defined in the ‘component.xml’ file in the core module. Each and every phase in lifecycle has a unique goal,

followings are the goals/tasks performed by lifecycle phases:

Resource Preparation- copies resources like configuration files to build folder.
Compilation- Compiling source codes.
Packaging- Copying dependency JAR files to build folder.
Runs unit tests.
Graphical Representation of Maven Lifecycle

Maven Life Cycle 1
1. Default Lifecycle
It is one of the most important Lifecycles of maven. In this lifecycle, Maven builds, tests and distributes. There are 22 phases/tasks performed in this lifecycle phase. Which are given in the following table?

S.No.	Task	Description
1	Validate	This phase validates the project and gathers all project related information.
2	Initialize	This phase initializes or sets properties for the build process.
3	Generate sources	Generates required source codes for compiling the project.
4	Process Sources	This phase copies and processes the sources into the destination directory and filters.
5	Generate resources	Generate resources included in the packages.
6	Process resources	Copies and processes the resources into a destination directory which are necessary for the packaging process.
7	Compile	Compiles the source code.
8	Process classes	This phase processes compiled source code or classes for optimization and byte code enhancement.
9	Generate-test-sources	Generates test source code which included in the compilation phase.
10	Process-test-source	Test the processes of the test source code and filter values.
11	Test-compile	Tests the compiled source code and copies into the destination directory.
12	Process-test-classes	Processes the generated files from the test compile phase.
13	Test	This phase tests code using a suitable unit testing method.
14	Prepare-package	This is the pre-packaging process. Performs necessary operation before the actual packaging process.
15	Package	Gathers all compiled files and packages in a specified format.
16	Pre-integration-test	This phase performs processes required before actual integration i.e. environment setup.
17	Integration-test	Actual integration testing phase. Deploys the necessary packages for integration testing.
18	Post-integration-test	In this phase, post-integration test processes are executed like clean up processes.
19	Verify	This phase verifies the packages for validity and quality criteria.
20	Install	This phase installs the packages into the local repository.
21	Deploy	This process deploys the final packages into a remote repository.
22	Validate	Validates the project code and packages for completion of the build process.

Q6.What are the different types of Maven repositories?
ans--
In Maven terminology, a repository is a directory where all the project jars, library jar, plugins or any other project specific artifacts are stored and can be used by Maven easily.

Maven repository are of three types. The following illustration will give an idea regarding these three types.

local
central
remote

Local Repository
Maven local repository is a folder location on your machine. It gets created when you run any maven command for the first time.
Maven local repository keeps your project's all dependencies (library jars, plugin jars etc.). When you run a Maven build, then Maven automatically downloads all the dependency jars into the local repository. It helps to avoid references to dependencies stored on remote machine every time a project is build.

Central Repository
Maven central repository is repository provided by Maven community. It contains a large number of commonly used libraries.
When Maven does not find any dependency in local repository, it starts searching in central repository using following URL − https://repo1.maven.org/maven2/
Key concepts of Central repository are as follows −
This repository is managed by Maven community.
It is not required to be configured.
It requires internet access to be searched.

Remote Repository
Sometimes, Maven does not find a mentioned dependency in central repository as well. It then stops the build process and output error message to console. To prevent such situation, Maven provides concept of Remote Repository, which is developer's own custom repository containing required libraries or other project jars.

Q7. Explain what a Primary key, Candidate Key, Prime Attributes,
and Non-prime Attributes is?
ans--
Normalization is a process of organizing the data in database to avoid data redundancy,
insertion anomaly, update anomaly & deletion anomaly. Let’s discuss about anomalies first
then we will discuss normal forms with examples. 
Prime attributes in DBMS
A prime attribute is one of the attributes that make up the candidate key. In addition to being called prime attributes, key attributes is another name for this type of attribute. It is also present in all of the candidate keys.
A set of attributes that uniquely identify tuples in a table is known as a Candidate Key. Candidate Key is a super key with no attributes that are repeated.
They are key attributes because they can be used to uniquely identify any of the table's records.
Non-prime attributes in DBMS
Non-prime attributes are those attributes of the relationships that do not present in any of the possible candidate keys of the relation.
They are also known as non-key attributes. A primary key is an attribute or group of attributes used to uniquely identify any record in a table. The values of a primary key cannot be duplicated.
Non-prime (non-key) attributes are those that are not the primary key attributes. They can store a value an unlimited number of times. They are non-key attributes because they cannot be used to uniquely identify any of the table's records.
Q8. What are the rules for a table to be in 1NF, 2NF, and 3NF?
ans--
1NF	A relation is in 1NF if it contains an atomic value.
2NF	A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.
3NF	A relation will be in 3NF if it is in 2NF and no transition dependency exists.
BCNF	A stronger definition of 3NF is known as Boyce Codd's normal form.
4NF	A relation will be in 4NF if it is in Boyce Codd's normal form and has no multi-valued dependency.
5NF	A relation is in 5NF. If it is in 4NF and does not contain any join dependency, joining should be lossless.




