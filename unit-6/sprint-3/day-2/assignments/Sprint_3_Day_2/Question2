Q2/- Explain about IOC and Dependency Injection.
IOC--->>>
Spring IoC Container is the core of Spring Framework. It creates the objects, configures and 
assembles their dependencies, manages their entire life cycle. The Container uses Dependency 
Injection(DI) to manage the components that make up the application. It gets the information about
 the objects from a configuration file(XML) or Java Code or Java Annotations and Java POJO class.
  These objects are called Beans. Since the Controlling of Java objects and their lifecycle is not 
  done by the developers, hence the name Inversion Of Control. 
  
  Dependencies Injection---->>
  
  Dependency Injection is the main functionality provided by Spring IOC(Inversion of Control).
   The Spring-Core module is responsible for injecting dependencies through either Constructor
    or Setter methods. The design principle of Inversion of Control emphasizes keeping the Java 
    classes independent of each other and the container frees them from object creation and 
    maintenance. These classes, managed by Spring, must adhere to the standard definition of Java-
    Bean. Dependency Injection in Spring also ensures loose-coupling between the classes.
    
    There are two types of Spring Dependency Injection. They are
    
    Setter Dependency Injection (SDI): This is the simpler of the two DI methods.
     In this, the DI will be injected with the help of setter and/or getter methods.
      Now to set the DI as SDI in the bean, it is done through the bean-configuration file For 
      this, the property to be set with the SDI is declared under the <property> tag in the 
      bean-config file.
      
      Constructor Dependency Injection (CDI): In this, the DI will be injected with the help 
      of constructors. Now to set the DI as CDI in bean, it is done through the bean-configuration
       file For this, the property to be set with the CDI is declared under the <constructor-arg>
        tag in the bean-config file.
    